# This is for x86 devices without cuda supported. For example RK3588
FROM ros:noetic-perception-focal
ARG CERES_VERSION=2.1.0
ARG OPENCV_VERSION=4.10.0
ENV SWARM_WS=/root/swarm_ws
ARG ROS_VERSION=noetic
ARG FAISS_VERSION=1.7.4
ARG CMAKE_VERSION=3.24.1
ARG ONNX_VERSION=1.18.0

#Some basic dependencies
RUN  apt-get -y update && \
      DEBIAN_FRONTEND=noninteractive TZ=Asia/Beijing apt-get -y install tzdata && \
      apt-get install -y wget curl lsb-release git \
      libatlas-base-dev \
      libeigen3-dev \
      libgoogle-glog-dev \
      libsuitesparse-dev \
      libglib2.0-dev \
      libyaml-cpp-dev \
      libdw-dev \
      lsb-release \
      vim \
      curl \
      ca-certificates \
      htop \
      xterm \
      gdb \
      build-essential \
      net-tools \
      htop \
      xterm \
      gdb \
      zip \
      unzip

#ROS
RUN   apt-get install -y  --no-install-recommends \
      ros-${ROS_VERSION}-ros-base \
      ros-${ROS_VERSION}-nav-msgs \
      ros-${ROS_VERSION}-sensor-msgs \
      ros-${ROS_VERSION}-cv-bridge \
      ros-${ROS_VERSION}-rviz \
      ros-${ROS_VERSION}-image-transport-plugins \
      ros-${ROS_VERSION}-pcl-ros \
      build-essential \
      libdw-dev \
      ros-${ROS_VERSION}-catkin \
      python3-catkin-tools python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential \
      python3-pip && \
      apt clean

#Replace CMAKE
COPY  docker/target/cmake-3.24.1-Linux-x86_64.sh /tmp/cmake-install.sh
RUN   rm /usr/bin/cmake  \
      && chmod u+x /tmp/cmake-install.sh \
      && /tmp/cmake-install.sh --skip-license --prefix=/usr/ \
      && rm /tmp/cmake-install.sh \
      && cmake --version

#Install ceres
COPY  docker/target/ceres-solver /tmp/ceres-solver
RUN   cd /tmp/ceres-solver && \
      mkdir build && cd build && \
      cmake  -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF -DBUILD_BENCHMARKS=OFF .. && \
      make -j$(nproc) install && \
      rm -rf ../../ceres-solver

#Install ONNXRuntime
COPY  docker/target/onnxruntime-linux-aarch64-1.18.0.tgz /tmp/onnxruntime-linux-aarch64-${ONNX_VERSION}.tgz
RUN   cd /tmp &&\
      tar -zxvf onnxruntime-linux-aarch64-${ONNX_VERSION}.tgz && \
      cp -r onnxruntime-linux-aarch64-${ONNX_VERSION}/include/* /usr/local/include/ && \
      cp -r onnxruntime-linux-aarch64-${ONNX_VERSION}/lib/* /usr/local/lib/ && \
      rm -rf onnxruntime-linux-aarch64-${ONNX_VERSION} && \
      rm onnxruntime-linux-aarch64-${ONNX_VERSION}.tgz

#Install LCM
COPY  docker/target/lcm /tmp/lcm
RUN   cd /tmp/lcm && \
      mkdir build && cd build && \
      cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF -DBUILD_BENCHMARKS=OFF .. && \
      make -j$(nproc) install && \
      pip3 install lcm && \
      rm -rf ../../lcm/

#Install Faiss
COPY  docker/target/faiss /tmp/faiss
RUN   cd /tmp/faiss && \
      cmake -B build -DCMAKE_BUILD_TYPE=Release -DFAISS_OPT_LEVEL=NEON -DFAISS_ENABLE_PYTHON=OFF -DBUILD_TESTING=OFF -DFAISS_ENABLE_GPU=OFF . && \
      make -C build -j$(nproc) faiss && \
      make -C build install && \
      rm -rf ../faiss

#Install OpenGV
COPY  docker/target/opengv /tmp/opengv
RUN   cd /tmp && \
      mkdir opengv/build && cd opengv/build && cmake .. && make -j$(nproc) && \
      make install && \
      rm -rf ../../opengv

#Install Backward
COPY  docker/target/backward.hpp /usr/local/include/backward.hpp

#Install spdlog
COPY  docker/target/v1.12.0.tar.gz /tmp/v1.12.0.tar.gz
RUN   cd /tmp && \
      tar -zxvf v1.12.0.tar.gz && \
      cd spdlog-1.12.0 && \
      mkdir build && cd build && \
      cmake .. && make -j$(nproc) && \
      make install && \
      rm -rf ../../spdlog-1.12.0

COPY  docker/target/libtorch-cxx11-abi-shared-with-deps-2.0.1+cpu.zip /tmp/libtorch-cxx11-abi-shared-with-deps-2.0.1+cpu.zip
RUN   cd /tmp && \
      unzip libtorch-cxx11-abi-shared-with-deps-2.0.1+cpu.zip && \
      rm libtorch-cxx11-abi-shared-with-deps-2.0.1+cpu.zip && \
      cp -r libtorch/* /usr/local/

#Build D2SLAM
RUN   mkdir -p ${SWARM_WS}/src/
COPY  docker/target/swarm_msgs ${SWARM_WS}/src/swarm_msgs
COPY  docker/target/sync_bag_player ${SWARM_WS}/src/sync_bag_player
COPY  docker/target/vision_opencv ${SWARM_WS}/src/vision_opencv
COPY  ./ ${SWARM_WS}/src/D2SLAM
RUN   rm -rf ${SWARM_WS}/src/D2SLAM/docker/target

WORKDIR $SWARM_WS
RUN   . "/opt/ros/${ROS_VERSION}/setup.sh" && \
      catkin config -DCMAKE_BUILD_TYPE=Debug \
            --cmake-args -DUSE_CUDA=OFF -DUSE_ONNX=OFF && \
      catkin build


